PRAGMA Tanager5
PRAGMA Library "Demo.Mandelbrot"



-- Mandelbrot Set renderer in Tanager.                --
--                                                    --
-- Copyright 2016-2024 K.D.P.Ross <KDPRoss@gmail.com> --
--                                                    --
-- This code is licensed only for study and personal  --
-- enrichment.                                        --



-- /------------------------------------------\
-- | ‘The raison  d'être  of a program  is to |
-- | be  a  mathematically-elegant  object of |
-- | sublime beauty; it's also pretty cool if |
-- | it  occasionally   computes  something.’ |
-- |                             - K.D.P.Ross |
-- \------------------------------------------/



new data Complex = Complex Num Num

complex = { inject,
            project,
            mult,
            add,
            abs,
            iterate,
            numIters,
            filled
          }
          where inject                          : Num -> Num -> Complex
                ...                             = Complex
                project                         : Complex -> (Num, Num)
                ... (Complex r c)               = (r, c)
                mult                            : Complex -> Complex -> Complex
                ... (Complex a b) (Complex c d) = Complex e f
                                                  where e = a * c - b * d
                                                        f = b * c + a * d
                add                             : Complex -> Complex -> Complex
                ... (Complex a b) (Complex c d) = Complex e f
                                                  where e = a + c
                                                        f = b + d
                abs                             : Complex -> Num
                ... (Complex a b)               = sqrt <| a * a + b * b
                iterate                         : Num -> Complex -> Complex
                ...                             = fun loop n c -> {n -> n} (c' -> c)
                                                    _ -> cases
                                                           n <= 0       -> c'
                                                           abs c' > 100 -> c'
                                                           _            -> loop (n - 1) ((c' `mult` c') `add` c)
                numIters                        : Num
                ...                             = 10
                filled                          : Complex -> Bool
                ...                             = iterate numIters >> abs >> (_ <= 2)

generate : Num -> ()
... n    = fun loop {y -> -2} (x -> -2)
             _ -> cases
                    y >= 2 -> ()
                    x >= 2 -> printEndline ""
                              loop (y + yStep) -2
                    _      -> print (filled (inject x y) => "*" ; " ")
                              loop y (x + xStep)
           where xStep = 4 / n
                 yStep = xStep
           with { filled,
                  inject
                }
                with complex
