PRAGMA Tanager5
PRAGMA Library "Demo.FizzBuzz"



-- FizzBuzz Implementations in Tanager.               --
--                                                    --
-- Copyright 2015-2018 K.D.P.Ross <KDPRoss@gmail.com> --
--                                                    --
-- This code is licensed only for study and personal  --
-- enrichment.                                        --



-- /------------------------------------------\
-- | ‘The raison  d'être  of a program  is to |
-- | be  a  mathematically-elegant  object of |
-- | sublime beauty; it's also pretty cool if |
-- | it  occasionally   computes  something.’ |
-- |                             - K.D.P.Ross |
-- \------------------------------------------/



divisibleBy : Num -> Num -> Bool
... n m     = 0 == n mod m

-- Let's implement it directly first.
fizzBuzz : Num -> ()
...      = fun
             <(_ < 1)> -> ~
             n         -> iter doOne [ 1 .. n ]
           where doOne n = printEndline l
                           where l    = cases
                                          div3 and div5 -> "FizzBuzz"
                                          div3          -> "Fizz"
                                          div5          -> "Buzz"
                                          _             -> show n
                                 div3 = n `divisibleBy` 3
                                 div5 = n `divisibleBy` 5

-- We can abstract over the predicates, the 'tag' type, and
-- the function combining the 'tag's before printing. We
-- take all the 'tag's associated with the successful
-- predicates, then apply `noTags` to the number in case
-- there are no tags or `combine` to all of the tags (in
-- stable order) else.
generalisedFizzBuzz   : [ (Num -> Bool, a) ] -> (Num -> String) -> ([ a ] -> String) -> Num -> ()
... ps noTags combine = fun
                          <(_ < 1)> -> ~
                          n         -> iter doOne [ 1 .. n ]
                        where doOne n = printEndline l
                                        where l = case ps |>
                                                         map ,((apply _ n), _) >>
                                                         filter 1of2
                                                    [] -> noTags n
                                                    ps -> ps |> map 2of2 >> combine

-- ... and, here's the 'normal' FizzBuzz as an instantiation
-- of the generalised version.
normalFizzBuzz : Num -> ()
...            = generalisedFizzBuzz [ (_ `divisibleBy` 3, "Fizz"),
                                       (_ `divisibleBy` 5, "Buzz")
                                     ] show implode
