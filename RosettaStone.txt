Here is some matched code in Tanager, Motmot D, and
Motmot F. The primary dimensions of distinction to examine
are:
- Explicit vs implicit typing.
- Linear vs block syntax.
- Assorted syntactic / naming idiosyncracies.

We'll ignore mixfix definitions, which look different
between Tanager and Motmot but are fundamentally equivalent.

/--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------\
|  Tanager 5                                                                                 |  Motmot A                                                                               |  Motmot F Script                                                                          |  Motmot F                                                                                 |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  -- (No module marker required)                                                            |  -- (No module marker required)                                                         |  -- (No module marker required)                                                           |  -- Module marker is strictly necessary.                                                  |
|                                                                                            |                                                                                         |                                                                                           |  {-- Rosetta --}                                                                          |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  typedef Letter = String                                                                   |  typedef Letter = String                                                                |  typedef Letter = String                                                                  |  typedef Letter = String                                                                  |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  typedef Letters = [ Letter ]                                                              |  typedef Letters = [ Letter ]                                                           |  typedef Letters = [ Letter ]                                                             |  typedef Letters = [ Letter ]                                                             |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  -- Unlike in the Motmot, we can only abstract over                                        |  typedef Parser  = result => Letters -> [ (result, Letters) ]                           |  typedef Parser  = result => Letters -> [ (result, Letters) ]                             |  typedef Parser  = result => Letters -> [ (result, Letters) ]                             |
|  -- `*`-kinded types (hence, no kind annotation), and type                                 |                                                                                         |                                                                                           |                                                                                           |
|  -- variables are on the LHS of `=` (because they,                                         |                                                                                         |                                                                                           |                                                                                           |
|  -- syntactically, can't be abstracted in a type).                                         |                                                                                         |                                                                                           |                                                                                           |
|  typedef Parser result = Letters -> [ (result, Letters) ]                                  |                                                                                         |                                                                                           |                                                                                           |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  succeed   : result -> Parser result                                                       |  succeed : result => result -> Parser result =                                          |  succeed : result => result -> Parser result =                                            |  succeed : result => result -> Parser result =                                            |
|  ... v inp = [ (v, inp) ]                                                                  |    result =>                                                                            |    result =>                                                                              |    result =>                                                                              |
|                                                                                            |      v : result ~ inp : Letters ~                                                       |      v : result ~ inp : Letters ~                                                         |      v : result ~ inp : Letters ~                                                         |
|                                                                                            |        [ (v, inp) ]                                                                     |        [ (v, inp) ]                                                                       |        [ (v, inp) ]                                                                       |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  fail-parse : Parser result                                                                |  fail-parse : result => Parser result =                                                 |  fail-parse : result => Parser result =                                                   |  fail-parse : result => Parser result =                                                   |
|  ...        = const []                                                                     |    result =>                                                                            |    result =>                                                                              |    result =>                                                                              |
|                                                                                            |      const{ Letters } [{ (result, Letters) }]                                           |      const{ Letters } [{ (result, Letters) }]                                             |      const{ Letters } [{ (result, Letters) }]                                             |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  -- Had to refactor this function because of a scoping                                     |  satisfy : (Letter -> Bool) -> Parser Letter =                                          |  satisfy : (Letter -> Bool) -> Parser Letter =                                            |  satisfy : (Letter -> Bool) -> Parser Letter =                                            |
|  -- difference between Motmot and Tanager: `p` wouldn't be                                 |    (_ : Letter -> Bool | [{ Letter }] ~ [{ (Letter, Letters) }]) <+                     |    fun                                                                                    |    fun                                                                                    |
|  -- in-scope in the predicate pattern if we used the                                       |    (p : Letter -> Bool | (((x : Letter) and {p}) :: (xs : Letters)) ~ succeed x xs) <+  |    (_ : Letter -> Bool | [{ Letter }]                         ~ [{ (Letter, Letters) }])  |    (_ : Letter -> Bool | [{ Letter }]                         ~ [{ (Letter, Letters) }])  |
|  -- Motmot-style destructuring.                                                            |    (_ : Letter -> Bool ~ ls : Letters ~ fail-parse{ Letter } ls)                        |    (p : Letter -> Bool | (x : Letter and {p}) :: xs : Letters ~ succeed x xs)             |    (p : Letter -> Bool | (x : Letter and {p}) :: xs : Letters ~ succeed x xs)             |
|  satisfy : (Letter -> Bool) -> Parser Letter                                               |                                                                                         |    (_ : Letter -> Bool ~ ls : Letters                         ~ fail-parse{ Letter } ls)  |    (_ : Letter -> Bool ~ ls : Letters                         ~ fail-parse{ Letter } ls)  |
|  ... p   = fun                                                                             |                                                                                         |                                                                                           |                                                                                           |
|              []                  -> []                                                     |                                                                                         |                                                                                           |                                                                                           |
|              ((x & <(p)>) :: xs) -> succeed x xs                                           |                                                                                         |                                                                                           |                                                                                           |
|              ls                  -> fail-parse ls                                          |                                                                                         |                                                                                           |                                                                                           |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  literal : Letter -> Parser Letter                                                         |  literal : Letter -> Parser Letter =                                                    |  literal : Letter -> Parser Letter =                                                      |  literal : Letter -> Parser Letter =                                                      |
|  ... x   = satisfy (x == _)                                                                |    x : Letter ~ satisfy (== x)                                                          |    x : Letter ~ satisfy (x == _)                                                          |    x : Letter ~ satisfy (x == _)                                                          |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  ||        : Parser a -> Parser a -> Parser a                                              |  -- Motmot has ‘exotic’ `~`-delimited λs.                                               |  -- Motmot has ‘exotic’ `~`-delimited λs.                                                 |  -- Motmot has ‘exotic’ `~`-delimited λs.                                                 |
|  ... p1 p2 = \ inp -> p1 inp ++ p2 inp                                                     |  || : a => Parser a -> Parser a -> Parser a =                                           |  || : a => Parser a -> Parser a -> Parser a =                                             |  || : a => Parser a -> Parser a -> Parser a =                                             |
|                                                                                            |    a =>                                                                                 |    a =>                                                                                   |    a =>                                                                                   |
|                                                                                            |      p1 : Parser a ~ p2 : Parser a ~ inp : Letters ~                                    |      p1 : Parser a ~ p2 : Parser a ~ inp : Letters ~                                      |      p1 : Parser a ~ p2 : Parser a ~ inp : Letters ~                                      |
|                                                                                            |        p1 inp ++ p2 inp                                                                 |        p1 inp ++ p2 inp                                                                   |        p1 inp ++ p2 inp                                                                   |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  -- In Tanager, all of the type annotations are *optional*                                 |  -- In Motmot, type annotations are compulsory any time that                            |  -- In Motmot, type annotations are compulsory any time that                              |  -- In Motmot, type annotations are compulsory any time that                              |
|  -- (but are good style for top-level bindings and                                         |  -- a name is introduced (when creating a binding, in                                   |  -- a name is introduced (when creating a binding, in                                     |  -- a name is introduced (when creating a binding, in                                     |
|  -- `where`-bound functions.                                                               |  -- patterns, etc.).                                                                    |  -- patterns, etc.).                                                                      |  -- patterns, etc.).                                                                      |
|  <=>       : Parser a -> Parser b -> Parser (a, b)                                         |  <=> : (a, b) => Parser a -> Parser b -> Parser (a, b) =                                |  <=> : (a, b)  => Parser a -> Parser b -> Parser (a, b) =                                 |  <=> : (a, b)  => Parser a -> Parser b -> Parser (a, b) =                                 |
|  ... p1 p2 = p1 >>                                                                         |    (a, b) =>                                                                            |    (a, b) =>                                                                              |    (a, b) =>                                                                              |
|                concatMap core                                                              |      p1 : Parser a ~ p2 : Parser b ~                                                    |      p1 : Parser a ~ p2 : Parser b ~                                                      |      p1 : Parser a ~ p2 : Parser b ~                                                      |
|              where core           : (a, Letters) -> [ ((a, b), Letters) ]                  |        let (core : (a, Letters) -> [ ((a, b), Letters) ]) =                             |        p1 >> concat-map core                                                              |        p1 >> concat-map core                                                              |
|                    ... (v1, out1) = out1 |>                                                |              (v1 : a, out1 : Letters) ~                                                 |        where core : (a, Letters) -> [ ((a, b), Letters) ] =                               |        where core : (a, Letters) -> [ ((a, b), Letters) ] =                               |
|                                       p2 >>                                                |                out1 |>                                                                  |                (v1 : a, out1 : Letters) ~                                                 |                (v1 : a, out1 : Letters) ~                                                 |
|                                       map (\ (v2, out2) -> ((v1, v2), out2))               |                  p2 >>                                                                  |                  out1 |>                                                                  |                  out1 |>                                                                  |
|                                                                                            |                  map ((v2 : b, out2 : Letters) ~                                        |                    p2 >>                                                                  |                    p2 >>                                                                  |
|                                                                                            |                    ((v1, v2), out2)                                                     |                    map ((v2 : b, out2 : Letters) ~                                        |                    map ((v2 : b, out2 : Letters) ~                                        |
|                                                                                            |                  )                                                                      |                      ((v1, v2), out2)                                                     |                      ((v1, v2), out2)                                                     |
|                                                                                            |        in p1 >> concat-map core                                                         |                    )                                                                      |                    )                                                                      |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  >>>     : Parser a -> (a -> b) -> Parser b                                                |  >>> : (a, b) => Parser a -> (a -> b) -> Parser b =                                     |  >>> : (a, b) => Parser a -> (a -> b) -> Parser b =                                       |  >>> : (a, b) => Parser a -> (a -> b) -> Parser b =                                       |
|  ... p f = p >> map (first f)                                                              |    (a, b) =>                                                                            |    (a, b) =>                                                                              |    (a, b) =>                                                                              |
|                                                                                            |      p : Parser a ~ f : a -> b ~                                                        |      p : Parser a ~ f : a -> b ~                                                          |      p : Parser a ~ f : a -> b ~                                                          |
|                                                                                            |        p >>                                                                             |        p >>                                                                               |        p >>                                                                               |
|                                                                                            |        map (first{ Letters } f)                                                         |        map (first{ Letters } f)                                                           |        map (first{ Letters } f)                                                           |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  many  : Parser a -> Parser [ a ]                                                          |  many : a => Parser a -> Parser [ a ] =                                                 |  many : a => Parser a -> Parser [ a ] =                                                   |  many : a => Parser a -> Parser [ a ] =                                                   |
|  ... p = (p <=> (\ inp -> many p inp) >>> uncurry2 (_ :: _)) || succeed []                 |    a =>                                                                                 |    a =>                                                                                   |    a =>                                                                                   |
|                                                                                            |      p : Parser a ~                                                                     |      p : Parser a ~                                                                       |      p : Parser a ~                                                                       |
|                                                                                            |        (p <=> (inp : Letters ~ many p inp) >>> uncurry (::{ a })) ||                    |        (p <=> (inp : Letters ~ many p inp) >>> uncurry (::{ a })) ||                      |        (p <=> (inp : Letters ~ many p inp) >>> uncurry (::{ a })) ||                      |
|                                                                                            |        succeed [{ a }]                                                                  |        succeed [{ a }]                                                                    |        succeed [{ a }]                                                                    |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  some  : Parser a -> Parser [ a ]                                                          |  some : a => Parser a -> Parser [ a ] =                                                 |  some : a => Parser a -> Parser [ a ] =                                                   |  some : a => Parser a -> Parser [ a ] =                                                   |
|  ... p = p <=> many p >>> uncurry2 (_ :: _)                                                |    a =>                                                                                 |    a =>                                                                                   |    a =>                                                                                   |
|                                                                                            |      p : Parser a ~                                                                     |      p : Parser a ~                                                                       |      p : Parser a ~                                                                       |
|                                                                                            |        p <=> many p >>> uncurry (::{ a })                                               |        p <=> many p >>> uncurry (::{ a })                                                 |        p <=> many p >>> uncurry (::{ a })                                                 |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  number : Parser String                                                                    |  -- Motmot uses `=<` for symmetry with `>=`.                                            |  -- Motmot uses `=<` for symmetry with `>=`.                                              |  -- Motmot uses `=<` for symmetry with `>=`.                                              |
|  ...    = some (satisfy digit) >>> implode                                                 |  -- Motmot has `$`-delimited strings for reasons.                                       |  -- Motmot has `$`-delimited strings for reasons.                                         |  -- Motmot has `$`-delimited strings for reasons.                                         |
|           where digit = ("0" <= _) and^ (_ <= "9")                                         |  number : Parser String =                                                               |  number : Parser String =                                                                 |  number : Parser String =                                                                 |
|                                                                                            |    let (digit : String -> Bool) =                                                       |    some (satisfy digit) >>> implode                                                       |    some (satisfy digit) >>> implode                                                       |
|                                                                                            |          ($0$ =< _) and^ (_ =< $9$)                                                     |    where digit : String -> Bool =                                                         |    where digit : String -> Bool =                                                         |
|                                                                                            |    in some (satisfy digit) >>> implode                                                  |            ($0$ =< _) and^ (_ =< $9$)                                                     |            ($0$ =< _) and^ (_ =< $9$)                                                     |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  word : Parser String                                                                      |  word : Parser String =                                                                 |  word : Parser String =                                                                   |  word : Parser String =                                                                   |
|  ...  = some (satisfy letter) >>> implode                                                  |    let (letter : String -> Bool) =                                                      |    some (satisfy letter) >>> implode                                                      |    some (satisfy letter) >>> implode                                                      |
|         where letter : String -> Bool                                                      |          lowercase >>                                                                   |    where letter : String -> Bool =                                                        |    where letter : String -> Bool =                                                        |
|               ...    = lowercase >>                                                        |          ($a$ =< _) and^ (_ =< $z$)                                                     |            lowercase >>                                                                   |            lowercase >>                                                                   |
|                          ("a" <= _) and^ (_ <= "z")                                        |    in some (satisfy letter) >>> implode                                                 |            ($a$ =< _) and^ (_ =< $z$)                                                     |            ($a$ =< _) and^ (_ =< $z$)                                                     |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  string : String -> Parser String                                                          |  string : String -> Parser String =                                                     |  string : String -> Parser String =                                                       |  string : String -> Parser String =                                                       |
|  ...    = explode >> core                                                                  |    let (core : [ String ] -> Parser String) =                                           |    explode >> core                                                                        |    explode >> core                                                                        |
|           where core          : [ String ] -> Parser String                                |          ([{ String }] ~ succeed $$) <+                                                 |    where core : [ String ] -> Parser String =                                             |    where core : [ String ] -> Parser String =                                             |
|                 ... []        = succeed ""                                                 |          ((x : String) :: (xs : [ String ]) ~ literal x <=> core xs >>> uncurry (#))    |            fun                                                                            |            fun                                                                            |
|                 ... (x :: xs) = literal x <=> core xs >>> uncurry2 (#)                     |    in explode >> core                                                                   |            ([{ String }]                      ~ succeed $$)                               |            ([{ String }]                  ~ succeed $$)                                   |
|                                                                                            |                                                                                         |            ((x : String) :: (xs : [ String ]) ~ literal x <=> core xs >>> uncurry (#))    |            (x : String :: xs : [ String ] ~ literal x <=> core xs >>> uncurry (#))        |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  ==>       : Parser a -> Parser b -> Parser b                                              |  ==> : (a, b) => Parser a -> Parser b -> Parser b =                                     |  ==> : (a, b) => Parser a -> Parser b -> Parser b =                                       |  ==> : (a, b) => Parser a -> Parser b -> Parser b =                                       |
|  ... p1 p2 = p1 <=> p2 >>> snd                                                             |    (a, b) =>                                                                            |    (a, b) =>                                                                              |    (a, b) =>                                                                              |
|                                                                                            |      p1 : Parser a ~ p2 : Parser b ~                                                    |      p1 : Parser a ~ p2 : Parser b ~                                                      |      p1 : Parser a ~ p2 : Parser b ~                                                      |
|                                                                                            |        p1 <=> p2 >>> snd{ a, b }                                                        |        p1 <=> p2 >>> snd{ a, b }                                                          |        p1 <=> p2 >>> snd{ a, b }                                                          |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  <==       : Parser a -> Parser b -> Parser a                                              |  <== : (a, b) => Parser a -> Parser b -> Parser a =                                     |  <== : (a, b) => Parser a -> Parser b -> Parser a =                                       |  <== : (a, b) => Parser a -> Parser b -> Parser a =                                       |
|  ... p1 p2 = p1 <=> p2 >>> fst                                                             |    (a, b) =>                                                                            |    (a, b) =>                                                                              |    (a, b) =>                                                                              |
|                                                                                            |      p1 : Parser a ~ p2 : Parser b ~                                                    |      p1 : Parser a ~ p2 : Parser b ~                                                      |      p1 : Parser a ~ p2 : Parser b ~                                                      |
|                                                                                            |        p1 <=> p2 >>> fst{ a, b }                                                        |        p1 <=> p2 >>> fst{ a, b }                                                          |        p1 <=> p2 >>> fst{ a, b }                                                          |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  return  : Parser a -> b -> Parser b                                                       |  return : (a, b) => Parser a -> b -> Parser b =                                         |  return : (a, b) => Parser a -> b -> Parser b =                                           |  return : (a, b) => Parser a -> b -> Parser b =                                           |
|  ... p v = p >>> const v                                                                   |    (a, b) =>                                                                            |    (a, b) =>                                                                              |    (a, b) =>                                                                              |
|                                                                                            |      p : Parser a ~ v : b ~                                                             |      p : Parser a ~ v : b ~                                                               |      p : Parser a ~ v : b ~                                                               |
|                                                                                            |        p >>> const{ a } v                                                               |        p >>> const{ a } v                                                                 |        p >>> const{ a } v                                                                 |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  new data Expr = Num Num                                                                   |  axiom Expr : *                                                                         |  axiom Expr : *                                                                           |  axiom Expr : *                                                                           |
|                  Add Expr Expr                                                             |  axiom Num  : Num -> Expr                                                               |  axiom Num  : Num -> Expr                                                                 |  axiom Num  : Num -> Expr                                                                 |
|                  Sub Expr Expr                                                             |  axiom Add  : Expr -> Expr -> Expr                                                      |  axiom Add  : Expr -> Expr -> Expr                                                        |  axiom Add  : Expr -> Expr -> Expr                                                        |
|                  Mul Expr Expr                                                             |  axiom Sub  : Expr -> Expr -> Expr                                                      |  axiom Sub  : Expr -> Expr -> Expr                                                        |  axiom Sub  : Expr -> Expr -> Expr                                                        |
|                  Div Expr Expr                                                             |  axiom Mul  : Expr -> Expr -> Expr                                                      |  axiom Mul  : Expr -> Expr -> Expr                                                        |  axiom Mul  : Expr -> Expr -> Expr                                                        |
|                                                                                            |  axiom Div  : Expr -> Expr -> Expr                                                      |  axiom Div  : Expr -> Expr -> Expr                                                        |  axiom Div  : Expr -> Expr -> Expr                                                        |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  value : String -> Expr                                                                    |  value : String -> Expr = read{ Num } >> Num                                            |  value : String -> Expr = read{ Num } >> Num                                              |  value : String -> Expr = read{ Num } >> Num                                              |
|  ...   = read >> Num                                                                       |                                                                                         |                                                                                           |                                                                                           |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  plus : (Expr, Expr) -> Expr                                                               |  plus : (Expr, Expr) -> Expr = uncurry Add                                              |  plus : (Expr, Expr) -> Expr = uncurry Add                                                |  plus : (Expr, Expr) -> Expr = uncurry Add                                                |
|  ...  = uncurry2 Add                                                                       |                                                                                         |                                                                                           |                                                                                           |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  minus : (Expr, Expr) -> Expr                                                              |  minus : (Expr, Expr) -> Expr = uncurry Sub                                             |  minus : (Expr, Expr) -> Expr = uncurry Sub                                               |  minus : (Expr, Expr) -> Expr = uncurry Sub                                               |
|  ...   = uncurry2 Sub                                                                      |                                                                                         |                                                                                           |                                                                                           |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  times : (Expr, Expr) -> Expr                                                              |  times : (Expr, Expr) -> Expr = uncurry Mul                                             |  times : (Expr, Expr) -> Expr = uncurry Mul                                               |  times : (Expr, Expr) -> Expr = uncurry Mul                                               |
|  ...   = uncurry2 Mul                                                                      |                                                                                         |                                                                                           |                                                                                           |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  divide : (Expr, Expr) -> Expr                                                             |  divide : (Expr, Expr) -> Expr = uncurry Div                                            |  divide : (Expr, Expr) -> Expr = uncurry Div                                              |  divide : (Expr, Expr) -> Expr = uncurry Div                                              |
|  ...    = uncurry2 Div                                                                     |                                                                                         |                                                                                           |                                                                                           |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  -- The Tanager has to be refactored because top-level                                     |  expn : Parser Expr =                                                                   |  expn : Parser Expr =                                                                     |  expn : Parser Expr =                                                                     |
|  -- bindings aren't mutually-recursive.                                                    |    (term <== literal $+$ <=> (inp : Letters ~ expn inp) >>> plus) ||                    |    (term <== literal $+$ <=> (inp : Letters ~ expn inp) >>> plus) ||                      |    (term <== literal $+$ <=> (inp : Letters ~ expn inp) >>> plus) ||                      |
|  expn : Parser Expr                                                                        |    (inp : Letters ~ (term <== literal $-$ <=> term >>> minus) inp) ||                   |    (inp : Letters ~ (term <== literal $-$ <=> term >>> minus) inp) ||                     |    (inp : Letters ~ (term <== literal $-$ <=> term >>> minus) inp) ||                     |
|  ...  = (term <== literal "+" <=> (\ inp -> expn inp) >>> plus) ||                         |    (inp : Letters ~ term inp)                                                           |    (inp : Letters ~ term inp)                                                             |    (inp : Letters ~ term inp)                                                             |
|           (\ inp -> (term <== literal "-" <=> term >>> minus) inp) ||                      |  term : Parser Expr =                                                                   |  term : Parser Expr =                                                                     |  term : Parser Expr =                                                                     |
|           (\ inp -> term inp)                                                              |    (factor <== literal $*$ <=> (inp : Letters ~ term inp) >>> times) ||                 |    (factor <== literal $*$ <=> (inp : Letters ~ term inp) >>> times) ||                   |    (factor <== literal $*$ <=> (inp : Letters ~ term inp) >>> times) ||                   |
|         where term   : Parser Expr                                                         |    (inp : Letters ~ (factor <== literal $/$ <=> factor >>> divide) inp) ||              |    (inp : Letters ~ (factor <== literal $/$ <=> factor >>> divide) inp) ||                |    (inp : Letters ~ (factor <== literal $/$ <=> factor >>> divide) inp) ||                |
|               ...    = (factor <== literal "*" <=> (\ inp -> term inp) >>> times) ||       |    (inp : Letters ~ factor inp)                                                         |    (inp : Letters ~ factor inp)                                                           |    (inp : Letters ~ factor inp)                                                           |
|                          (\ inp -> (factor <== literal "/" <=> factor >>> divide) inp) ||  |  factor : Parser Expr =                                                                 |  factor : Parser Expr =                                                                   |  factor : Parser Expr =                                                                   |
|                          (\ inp -> factor inp)                                             |    (number >>> value) ||                                                                |    (number >>> value) ||                                                                  |    (number >>> value) ||                                                                  |
|               factor : Parser Expr                                                         |    (inp : Letters ~ (literal $($ ==> expn <== literal $)$) inp)                         |    (inp : Letters ~ (literal $($ ==> expn <== literal $)$) inp)                           |    (inp : Letters ~ (literal $($ ==> expn <== literal $)$) inp)                           |
|               ...    = (number >>> value) ||                                               |                                                                                         |                                                                                           |                                                                                           |
|                          (\ inp -> (literal "(" ==> expn <== literal ")") inp)             |                                                                                         |                                                                                           |                                                                                           |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
+--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+
|  -- (No module marker required)                                                            |  -- (No closing module marker required)                                                 |  -- (No closing module marker required)                                                   |  {-end- Rosetta --}                                                                       |
|                                                                                            |                                                                                         |                                                                                           |                                                                                           |
\--------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------/
