#MotmotB

┌───────────────────────────────────────────────────────┐
│ Parser combinators in Motmot based on those from      │
│ ‘Higher-Order Functions for Parsing’ (G.Hutton, 1992) │
│                                                       │
│ Copyright 2020 K.D.P.Ross <KDPRoss@gmail.com>         │
│                                                       │
│ This code is licensed only for study and personal     │
│ enrichment.                                           │
└───────────────────────────────────────────────────────┘


│ Relevant resources:
│ - the original paper: tinyurl.com/sr5w7zp
│ - Wikipedia article ‘Parser Combinators’: tinyurl.com/nw3epcy
│ - Hutton talking about this on ‘Computerphile’: https://youtu.be/dDtZLm7HIJs


┌──────────────────────────────────────────┐
│ ‘The raison  d'être  of a program  is to │
│ be  a  mathematically-elegant  object of │
│ sublime beauty; it's also pretty cool if │
│ it  occasionally   computes  something.’ │
│                             - K.D.P.Ross │
└──────────────────────────────────────────┘


│ This code is an example of ‘Motmot B’ syntax (Cf. the
│ ‘Motmot A’ version.). (N.b., ‘Motmot C’ also–exists—it's
│ the core language that both ‘A’ and ‘B’ variants are
│ desugared to internally.) I've often (half-(?))joked
│ about what it might be like for multiple programming
│ languages to have ‘linguistic offspring’, combining
│ features from each, and what the resulting language would
│ ‘feel like’; to explore this, I've augmented Motmot to
│ parse Tanager-like block-based / two-dimensional syntax.
│ –and– It feels like an odd mix of Motmot and Tanager,
│ which probably ought to be less surprising than it is.
│ Specifically it has:
│ - Tanagerific
│   - aligned-in-two-dimensions ‘block’ syntax (with
│     ‘small-block’ embedding)
│   - define-by-clauses (à la Hope / Miranda / Haskell).
│ - Motmotastic
│   - higher-kinded type variables / explicit type
│     abstraction (full Fω)
│   - Church-style abstraction / type checking (rather than
│     inference)
│   - partial-function composition
│   - vaguely-Haskell-style infix ‘sections’
│   - ‘exotic’ `~`-delimited λs.
│ –and– Since they share a common linguistic heritage
│ (Codeine′, Tanager4), they share numerous fairly-unique
│ language features:
│ - open algebraic datatypes
│ - arbitrary-fixity / -precedence mixfix names
│ - F#-inspired `|>` / `>>` pipelining
│ - function patterns
│ - predicate patterns
│ - expression patterns
│ - pattern conjunction.


-- ========== Mixfix Syntax Setup ========== --

mixfix 100 _ || _
mixfix 110 _ <=> _
mixfix 80 _ >>> _
mixfix 110 _ ==> _
mixfix 110 _ <== _
mixfix 80 _ return _


-- ========== The Combinator Library ========== --

typedef Letter  = String

typedef Letters = [ Letter ]

typedef Parser  = (result : *) => Letters -> [ (result, Letters) ]


-- ===== Primitive Parsers (§2.1) ===== --

succeed                          : (result : *) => result -> Parser result
... (v : result) (inp : Letters) = [ (v, inp) ]

fail-parse : (result : *) => Parser result
...        = const{ Letters } [{ (result, Letters) }]

satisfy                                                           : (Letter -> Bool) -> Parser Letter
... (_ : Letter -> Bool) [{ Letter }]                             = [{ (Letter, Letters) }]
... (p : Letter -> Bool) (((x : Letter) & {p}) :: (xs : Letters)) = succeed x xs
... (_ : Letter -> Bool) (ls : Letters)                           = fail-parse{ Letter } ls

literal          : Letter -> Parser Letter
... (x : Letter) = satisfy (x == _)


-- ===== Combinators (§2.2) ===== --

│ `alt` from Hutton's implementation.

||                                  : (a : *) => Parser a -> Parser a -> Parser a
... (p1 : Parser a) (p2 : Parser a) = (inp : Letters) ~ p1 inp ++ p2 inp


│ `then` from Hutton's implementation; η-reduced.

<=>                                 : (a : *) => (b : *) => Parser a -> Parser b -> Parser (a, b)
... (p1 : Parser a) (p2 : Parser b) = p1 >>
                                        concat-map core
                                      where core                             : (a, Letters) -> [ ((a, b), Letters) ]
                                            ... ((v1 : a), (out1 : Letters)) = out1 |>
                                                                                 p2 >>
                                                                                 map (((v2 : b), (out2 : Letters)) ~ ((v1, v2), out2))


-- ===== Manipulating Values (§2.3) ===== --

│ `using` from Hutton's implementation.

>>>                             : (a : *) => (b : *) => Parser a -> (a -> b) -> Parser b
... (p : Parser a) (f : a -> b) = p >> map (first{ Letters } f)


many               : (a : *) => Parser a -> Parser [ a ]
... (p : Parser a) = (p <=> ((inp : Letters) ~ many p inp) >>> uncurry (::{ a })) || succeed [{ a }]

some               : (a : *) => Parser a -> Parser [ a ]
... (p : Parser a) = p <=> many p >>> uncurry (::{ a })

number : Parser String
...    = some (satisfy digit) >>> implode
         where (digit : String -> Bool) = ($0$ =< _) and^ (_ =< $9$)

word : Parser String
...  = some (satisfy letter) >>> implode
       where letter : String -> Bool
             ...    = lowercase >>
                        ($a$ =< _) and^ (_ =< $z$)

string : String -> Parser String
...    = explode >> core
         where core                                    : [ String ] -> Parser String
               ... [{ String }]                        = succeed $$
               ... ((x : String) :: (xs : [ String ])) = literal x <=> core xs >>> uncurry (#)

==>                                 : (a : *) => (b : *) => Parser a -> Parser b -> Parser b
... (p1 : Parser a) (p2 : Parser b) = p1 <=> p2 >>> snd{ a, b }

<==                                 : (a : *) => (b : *) => Parser a -> Parser b -> Parser a
... (p1 : Parser a) (p2 : Parser b) = p1 <=> p2 >>> fst{ a, b }

return                     : (a : *) => (b : *) => Parser a -> b -> Parser b
... (p : Parser a) (v : b) = p >>> const{ a } v



-- ========== Example Expression Language (§2.4) ========== --

-- ===== Expression Representation ===== --

new data Expr = Num Num
                Add Expr Expr
                Sub Expr Expr
                Mul Expr Expr
                Div Expr Expr


-- ===== Expression Parser ===== --

│ The η-expansion is necessary here because we're of
│ applicative-order (rather than lazy) evaluation; this
│ stuff always looks better in Haskell (or Miranda)!

│ Diverge a bit from the paper here to allow things like
│ `$2+3+4$`; this was handled by Hutton's code in the
│ video.

expn : Parser Expr
...  = (term <== literal $+$ <=> ((inp : Letters) ~ expn inp) >>> plus) ||
         ((inp : Letters) ~ (term <== literal $-$ <=> term >>> minus) inp) ||
         ((inp : Letters) ~ term inp)

term : Parser Expr
...  = (factor <== literal $*$ <=> ((inp : Letters) ~ term inp) >>> times) ||
         ((inp : Letters) ~ (factor <== literal $/$ <=> factor >>> divide) inp) ||
         ((inp : Letters) ~ factor inp)

factor : Parser Expr
...    = (number >>> value) ||
           ((inp : Letters) ~ (literal $($ ==> expn <== literal $)$) inp)

value : String -> Expr
...   = read{ Num } >> Num

plus : (Expr, Expr) -> Expr
...  = uncurry Add

minus : (Expr, Expr) -> Expr
...   = uncurry Sub

times : (Expr, Expr) -> Expr
...   = uncurry Mul

divide : (Expr, Expr) -> Expr
...    = uncurry Div


-- ===== Evaluator ===== --

│ Don't handle error cases (e.g., `_ / 0`).

eval-expr                        : Expr -> Num
... (Num (n : Num))              = n
... (Add (e : Expr) (e' : Expr)) = eval-expr e + eval-expr e'
... (Sub (e : Expr) (e' : Expr)) = eval-expr e - eval-expr e'
... (Mul (e : Expr) (e' : Expr)) = eval-expr e * eval-expr e'
... (Div (e : Expr) (e' : Expr)) = eval-expr e / eval-expr e'


-- ===== Interpreter ===== --

read-eval-print  : String -> ()
... (s : String) = let strict (_ : ())         = print ($input:  `$ # s # $`.$)
                              (e : Maybe Expr) = s |>
                                                   explode >>
                                                   wrap-parser-unique expn
                   case e
                     (Just (e : Expr)) -> print ($parsed: `$ # show e # $`.$)
                                          print ($eval:   `$ # show (eval-expr e) # $`.$)
                     Nothing{ Expr }   ->  print $PARSE FAILURE!$

wrap-parser        : (a : *) => Parser a -> Letters -> [ a ]
... (p : Parser a) = p >>
                       filter (snd{ a, Letters } >>
                               ([{ Letter }] == _)
                              ) >>
                       map fst{ a, Letters }

wrap-parser-unique                 : (a : *) => Parser a -> Letters -> Maybe a
... (p : Parser a) (inp : Letters) = case wrap-parser p inp
                                       ((v : a) :: [{ a }]) -> Just v
                                       (_ : [ a ])          -> Nothing{ a }


-- ===== Examples ==== --

│ These are the examples that Hutton shows in the
│ ‘Computerphile’ video.

-- (ins) :s> read-eval-print $2+3*4$
--  in: `read-eval-print $2+3*4$`
-- out: `read-eval-print $2+3*4$`
-- has type: `()`
-- PRINT input:  `2+3*4`.
-- PRINT parsed: `Add (Num 2) (Mul (Num 3) (Num 4))`.
-- PRINT eval:   `14`.
-- linearised: ()

-- (ins) :s> read-eval-print $(2+3)*4$
--  in: `read-eval-print $(2+3)*4$`
-- out: `read-eval-print $(2+3)*4$`
-- has type: `()`
-- PRINT input:  `(2+3)*4`.
-- PRINT parsed: `Mul (Add (Num 2) (Num 3)) (Num 4)`.
-- PRINT eval:   `20`.
-- linearised: ()

-- (ins) :s> read-eval-print $(2+(7*10)+8)*20$
--  in: `read-eval-print $(2+(7*10)+8)*20$`
-- out: `read-eval-print $(2+(7*10)+8)*20$`
-- has type: `()`
-- PRINT input:  `(2+(7*10)+8)*20`.
-- PRINT parsed: `Mul (Add (Num 2) (Add (Mul (Num 7) (Num 10)) (Num 8))) (Num 20)`.
-- PRINT eval:   `1600`.
-- linearised: ()

-- (ins) :s> read-eval-print $2+3*$
--  in: `read-eval-print $2+3*$`
-- out: `read-eval-print $2+3*$`
-- has type: `()`
-- PRINT input:  `2+3*`.
-- PRINT PARSE FAILURE!
-- linearised: ()

-- (ins) :s> read-eval-print $(2+3$
--  in: `read-eval-print $(2+3$`
-- out: `read-eval-print $(2+3$`
-- has type: `()`
-- PRINT input:  `(2+3`.
-- PRINT PARSE FAILURE!
-- linearised: ()
