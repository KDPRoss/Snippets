PRAGMA Tanager5
PRAGMA Library "Demo.Sudoku"



-- Sudoku Solver in Tanager.                          --
--                                                    --
-- Copyright K.D.P.Ross <KDPRoss@gmail.com>           --
--                                                    --
-- This code is licensed only for study and personal  --
-- enrichment.                                        --



-- /------------------------------------------\
-- | ‘The raison  d'être  of a program  is to |
-- | be  a  mathematically-elegant  object of |
-- | sublime beauty; it's also pretty cool if |
-- | it  occasionally   computes  something.’ |
-- |                             - K.D.P.Ross |
-- \------------------------------------------/



_ = from "<Prelude.Extended>"
      import [ "decompositionsSimp",
               "minimumBy"
             ]



-- ========== Coördinates ========== --

new data Position = Position Num Num

showPosition       : Position -> String
... (Position x y) = show (x, y)

nums : [ Num ]
...  = [ 1 .. 9 ]

subs : [ Position ]
...  = [ Position x y | x <- nums', y <- nums' ]
       where nums' = [ 1, 4, 7 ]

allPos : [ Position ]
...    = [ Position x y | x <- nums, y <- nums ]



-- ========== Values in the Square ========== --

-- For convenience, we'll separate the known / unknown
-- cases; we could, of course, simply use lists and check
-- for single-element lists. We'll maintain the invariant
-- that `Choice [ _ ]` is never constructed.

new data Value = Known Num
                 Choice (Set Num)

new data Work  = Row Num
                 Col Num
                 Sub Position

??? : Value
... = nums |>
        make-set >>
        Choice

showNum : Num -> String
...     = showProperFraction

showValue       : Value -> String
... (Known n)   = <s> +s n |>
                    Choice >>
                    showValue
... (Choice ns) = nums |>
                    map showOne >>
                    implode >>
                    around "[ " " ]"
                  where showOne n = if ns ?s n
                                       then showNum n
                                       else " "

known? : Value -> Bool
...    = (_ matches Known...)

one? : Set Num -> Bool
...  = sCard >>
         (1 == _)



-- ========== The Whole Square ========== --

-- Let's abstract all of the operations so that we retain
-- the flexibility to later change representations. We'll
-- use Tanager's (purely-functional) `Map`s to efficiently
-- represent the square.

new data Square = Square (Map Position Value)

typedef Chunk   = [ Value ]

-- Because of our definition of `getVal`, wrapping an empty
-- `Map` will work.
defaultSquare : Square
...           = Square <>

getVal           : Square -> Position -> Value
... (Square f) p = case f >+> p
                     Just v  -> v
                     Nothing -> ???

setVal             : Square -> Position -> Value -> Square
... (Square f) p v = Square (f <+> p |-> v')
                     where v' = case v
                                  Choice (<(one?)> & ns) -> ns |>
                                                              sChoose >>
                                                              2of2 >>
                                                              Known
                                  _                      -> v

getRow   : Square -> Num -> Chunk
... sq r = nums |>
             map (Position r >>
                    getVal sq
                 )

setRow      : Square -> Num -> Chunk -> Square
... sq r vs = zip vs nums |>
                foldl one sq
              where one sq (v, c) = setVal sq (Position r c) v

getCol   : Square -> Num -> Chunk
... sq c = nums |>
             map ((Position _ c) >>
                    getVal sq
                 )

setCol      : Square -> Num -> Chunk -> Square
... sq c vs = zip vs nums |>
                foldl one sq
              where one sq (v, r) = setVal sq (Position r c) v

canonicalSub       : Position -> Position
... (Position r c) = Position (adj r) (adj c)
                     where adj x = x - (x - 1) mod 3 + 1

possForSub          : Position -> [ Position ]
... (Position r c)  = [ Position (r' + dr) (c' + dc) | dr <- offsets, dc <- offsets ]
                      where offsets    = [ 0 .. 2 ]
                            r'         = r - (r - 1) mod 3
                            c'         = c - (c - 1) mod 3

getSub   : Square -> Position -> Chunk
... sq p = p |>
             possForSub >>
             map (getVal sq)

setSub      : Square -> Position -> Chunk -> Square
... sq p vs = zip ps vs |>
                foldl one sq
              where one sq = uncurry2 (setVal sq)
                    ps     = possForSub p

showSquare : Square -> String
... sq     = nums |>
               map showRow >>
               intersperse newline >>
               implode
             where showRow r = nums |>
                                 map (Position r >>
                                        getVal sq >>
                                        showValue
                                     ) >>
                                 intersperse " " >>
                                 implode

-- A bit more compact.
showSolution : Square -> String
... sq       = nums |>
                 map showRow >>
                 intersperse newline >>
                 implode
               where showRow r           = nums |>
                                             map (Position r >>
                                                    getVal sq >>
                                                    showValue
                                                 ) >>
                                             implode
                     showValue (Known x) = showNum x
                     ...       _         = " "



-- ========== Validator ========== --

-- Let's break validation into two phases: There's no
-- sense in checking partial solutions.

-- Are there no unknown values?
concrete? : Square -> Bool
... sq    = allPos |>
              map (getVal sq) >>
              forall known?

contradict? : Square -> Bool
... sq      = allPos |>
                exists (getVal sq >>
                          overconstrained?
                       )
              where overconstrained? = (_ matches Choice `<s>)

-- Given that `concrete? sq`, do the all-known values form
-- a valid Sudoku solution? (N.B., we *are* assuming that
-- the solution is a solution to *the original problem*! If
-- we were being a bit more rigorous, we'd check that the
-- original problem 'abstracts' the solution, in the obvious
-- way.)
solution? : Square -> Bool
... sq    = checkRows and checkCols and checkSubs
            where checkRows          = nums |>
                                         forall (getRow sq >>
                                                   checkGen
                                                )
                  checkCols          = nums |>
                                         forall (getCol sq >>
                                                   checkGen
                                                )
                  checkSubs          = subs |>
                                         forall (getSub sq >>
                                                   checkGen
                                                )
                  checkGen           = map extract >>
                                         good
                  good               = sort >>
                                         (nums == _)
                  extract (Known n)  = n
                  ...     (Choice _) = 0

-- Just for completeness:
correctSolution? : Square -> Bool
...              = concrete? and^ solution?

-- We'll 'measure' the uncertainty of a square by the total
-- number of possibilities that a brute-force solution would
-- have to consider -- the product of the counts of unknown
-- values.
uncertainty : Square -> Num
... sq      = allPos |>
                map (getVal sq >>
                       one
                    ) >>
                product
              where one (Choice ns) = sCard ns
                    ... (Known _)   = 1



-- ========== Standard Failure Monad ========== --

-- To make this code self-contained, we'll reïmplement
-- the `Maybe` monad; we could, of course, just import the
-- relevant module from the `Monads` library.

-- Some nicer syntax.
_ = level 25 is Left
    mixfix "_ >>= _" @ 25

return : a -> Maybe a
...    = Just

>>=            : Maybe a -> (a -> Maybe b) -> Maybe b
... (Just x) f = f x
... Nothing  _ = Nothing

failM : Maybe a
...   = Nothing

mapM : (a -> Maybe b) -> [ a ] -> Maybe [ b ]
...  = fun loop f -> _
         []      -> return []
         x :: xs -> f x     >>= (\ x'  ->
                    loop xs >>= (\ xs' ->
                    return <| x' :: xs'))



-- ========== Debugging / Verbosity ========== --

verbose : Bool
...     = True



-- ========== Relaxation Steps ========== --

knowns : [ Value ] -> [ Num ]
...    = concatMap get
         where get (Known x) = [ x ]
               ... _         = []

fetch           : Value -> [ Num ]
... (Choice xs) = from-set xs
... (Known x)   = [ x ]

relaxNeg : Chunk -> (Chunk, Set Num)
... vs   = (res, !! deltas)
           where res                  = zipWith adj vs nums
                 used                 = vs |>
                                          knowns >>
                                          make-set
                 adj (Choice xs)   i  = if xs' =/= xs
                                           then deltas := !! deltas +s i
                                        Choice xs'
                                        where xs' = xs \s used
                 ... (Known... & v) _ = v
                 deltas               = ref <s>

relaxPos : Chunk -> (Chunk, Set Num)
... vs   = (res, !! deltas)
           where res                       = vs |>
                                               decompositionsSimp >>
                                               (zipWith adj _ nums)
                 adj (Choice xs & v, vs) i = case xs \s possible
                                               <(one?)> & xs' -> deltas := !! deltas +s i
                                                                 xs' |>
                                                                   sChoose >>
                                                                   2of2 >>
                                                                   Known
                                               _              -> v
                                             where possible = vs |>
                                                                concatMap fetch >>
                                                                make-set
                 ... (Known... & v,  _)  _ = v
                 deltas                    = ref <s>

relaxChunk : Chunk -> (Chunk, Set Num)
...        = fun loop (deltas -> <s>) {}
               c -> if c == c''
                       then (c, deltas)
                       else loop (deltas \_/ ds \_/ ds') c''
                    where (c',  ds)  = relaxNeg c
                          (c'', ds') = relaxPos c'

relaxLoop : Square -> Set Work -> Square
... sq    = fun
              `<s> -> sq
              w    -> case task
                        Row r -> handle (getRow sq r) (setRow sq r) genW
                                 where genW = concatMap gen >>
                                                make-set
                                              where gen c = [ Col c, Sub (canonicalSub <| Position r c) ]
                        Col c -> handle (getCol sq c) (setCol sq c) genW
                                 where genW = concatMap gen >>
                                                make-set
                                              where gen r = [ Row r, Sub (canonicalSub <| Position r c) ]
                        Sub p -> handle (getSub sq p) (setSub sq p) genW
                                 where genW is = ps' |>
                                                   concatMap gen >>
                                                   make-set
                                                 where ps                 = possForSub p
                                                       ps'                = map (ps `nth` _) is
                                                       gen (Position r c) = [ Row r, Col c ]
                      where (rest, task)        = sChoose w
                            handle vs insr genW = case relaxChunk vs
                                                    (_,   `<s>) -> relaxLoop sq rest
                                                    (vs', ds)   -> relaxLoop sq' work
                                                                   where work = rest \_/ genW is
                                                                         sq'  = insr vs'
                                                                         is   = from-set ds

indentEndline : Num -> String -> ()
... n s       = if verbose
                   then printEndline <| pad # s
                where pad = replicate n " " |> implode

-- Perform relaxations iteratively until a fixed point is
-- reached. (Since we're printing our 'uncertainty' metric
-- anyhow, might well return early if this is `0`.)
relax      : Num -> Square -> Set Work -> Square
... i sq w = if 0 == unc
                then sq
                else indentEndline i <| "Relaxing; uncertainty is " # showNum unc # " ..."
                     sq'
             where unc = uncertainty sq
                   sq' = relaxLoop sq w

-- Assuming that we're stuck, choose some position that has
-- a minimal number of possibilities. (We don't really need
-- to do the full sort, of course.)
findChoice : Square -> Maybe (Position, [ Num ])
... sq     = case concatMap get allPos
               cs -> cs |>
                       minimumBy lengthSnd >>
                       return
               [] -> failM
             where get p           = case getVal sq p
                                       Known...  -> []
                                       Choice ns -> [ (p, from-set ns) ]
                   lengthSnd t1 t2 = fetch t1 < fetch t2
                                     where fetch = 2of2 >> length

-- Solve by:
-- perform a fixed-point relaxation step
-- if we're done
--    then check if we've a valid solution (we might not because
--         of an erroneous assumption)
--    else let p be a position holding a smallest set of unknown
--                  values
--         let ns be these values
--         try arbitrarily setting p := n for n in ns until one
--         succeeds.
solveLoop  : Num -> Square -> Set Work -> Maybe Square
... i sq w = case sq'
               <(concrete? and^ solution?)>  -> return sq'
               <(concrete? or^ contradict?)> -> failM
               _                             -> findChoice sq' >>=
                                                  uncurry2 (tryChoices sq')
             where sq'                       = relax i sq w
                   tryChoices _  _ []        = indentEndline i "Exhausted choices."
                                               failM
                   ...        sq p (n :: ns) = indentEndline i <| "assuming(" # showPosition p # "->" # showValue (Choice (make-set <| n :: ns)) # ") is " # showNum n # "."
                                               case solveLoop (i + 1) sq'' w'
                                                 Nothing -> indentEndline i <| "Backtrack: " # showPosition p # " cannot be " # showNum n # "."
                                                            tryChoices sq p ns
                                                 n       -> n
                                               where sq''           = setVal sq p (Known n)
                                                     w'             = make-set [ Row r, Col c, Sub (canonicalSub p) ]
                                                     (Position r c) = p

solve  : Square -> Maybe Square
... sq = solveLoop 0 sq allWork
         where allWork = allPos |>
                           filter (getVal sq >>
                                     known?
                                  ) >>
                           map genWork >>
                           foldl (\_/) <s>
                         where genWork (Position r c & p) = make-set [ Row r, Col c, Sub (canonicalSub p) ]



-- ========== Parser ========== --

-- It would be an enormous pain to type in the full
-- specification of a puzzle using our representation; let's
-- parse nice textual representations instead. We'll use `_`
-- to represent an unknown value.

-- Intermediate representation …
typedef SquareSpec = [ [ Value ] ]

-- and a conversion.
buildSquare : SquareSpec -> Square
...         = zipWith buildRow nums >>
                concat >>
                foldl (setVal >>
                         uncurry2
                      ) defaultSquare
              where buildRow r vs = zip (map (Position r) nums) vs

-- Build up a list of rows of values, then convert to our
-- internal function-based representation.
parse : [ String ] -> Square
...   = map (explode >>
               map parseChar
            ) >>
          buildSquare
        where parseChar "_" = ???
              ...       c   = Known (read c : Num)



-- ========== Sample Puzzles ========== --

-- It'd be no fun if we didn't have some puzzles to solve!
-- No idea where I got most of these … (They're called `sN`
-- where 's' is for 'sample'.)

s1 = [ "7__583__6",
       "__6__14_5",
       "_52__6_83",
       "3__2__958",
       "5___78_6_",
       "648_1_3__",
       "_6_8_25__",
       "__315__72",
       "2156___3_"
     ]

s2 = [ "____5_34_",
       "7_56_____",
       "4____8_1_",
       "__4_3__6_",
       "2__5_1__4",
       "_8__9_7__",
       "_5_8____9",
       "_____75_6",
       "_12_6____"
     ]

s3 = [ "34___57__",
       "5___69___",
       "_91______",
       "_628_____",
       "____9____",
       "_____438_",
       "______43_",
       "___51___7",
       "__89___65"
     ]

s4 = [ "_6_87____",
       "9______8_",
       "_15_493_2",
       "__295_8__",
       "____3____",
       "__3_284__",
       "1_628_93_",
       "_5______8",
       "____94_1_"
     ]

s5 = [ "_6___57_2",
       "__4_96_1_",
       "8713_2___",
       "5___713__",
       "_3__5__7_",
       "__782___5",
       "___5_9687",
       "_8_26_1__",
       "7_64___2_"
     ]

s6 = [ "8_______3",
       "5__8__7_4",
       "_______6_",
       "_6_98_1__",
       "__7___4__",
       "__8_61_9_",
       "_5_______",
       "3_2__4__8",
       "1_______5"
     ]

s7 = [ "63_2__4__",
       "_9__64__8",
       "___8__51_",
       "_1_6_9___",
       "____2____",
       "___4_7_5_",
       "_53__6___",
       "9__37__4_",
       "__1__2_75"
     ]

s8 = [ "_386_5_1_",
       "_____3_96",
       "_6____5__",
       "5______7_",
       "__6_8_2__",
       "_1______3",
       "__1____4_",
       "69_1_____",
       "_2_4_786_"
     ]

s9 = [ "_________",
       "8__2_9_56",
       "__2___8_4",
       "5_84__7__",
       "1__7_6__3",
       "__9__14_8",
       "6_1___3__",
       "48_6_7__2",
       "_________"
     ]

s10 = [ "_________",
        "_1_9__6__",
        "___43_8__",
        "58____16_",
        "_6_7_3_2_",
        "_______93",
        "__9385___",
        "__6__9_7_",
        "__4______"
      ]

s11 = [ "_________",
        "_1_9__6__",
        "___43_8__",
        "58____16_",
        "_6_7_3_2_",
        "_______93",
        "__9385___",
        "__6__9_7_",
        "__4______"
      ]

s12 = [ "79_____64",
        "___2__5__",
        "_____62_3",
        "2_398___5",
        "_________",
        "1___479__",
        "5_17_____",
        "__4__3___",
        "63______7"
      ]

s13 = [ "__6___19_",
        "4__76_3__",
        "____2_4_5",
        "9_____7__",
        "____4____",
        "__7_____8",
        "7_8_3____",
        "__5_71__4",
        "_92___8__"
      ]

s14 = [ "__7__8___",
        "14__7_8__",
        "9__5____1",
        "_6__1__2_",
        "_9__4__7_",
        "_7__5__8_",
        "4____6__7",
        "__3_2__56",
        "___7__2__"
      ]

s15 = [ "_4_______",
        "_3___124_",
        "___4_6__7",
        "8_9___63_",
        "_________",
        "_27___1_5",
        "6__8_7___",
        "_132___5_",
        "_______9_"
      ]

-- This puzzle was published by Arto Inkala; it's claimed
-- to be one of the hardest puzzles in the world; it
-- *certainly* does take a lot of backtracking!
s16 = [ "8________",
        "__36_____",
        "_7__9_2__",
        "_5___7___",
        "____457__",
        "___1___3_",
        "__1____68",
        "__85___1_",
        "_9____4__"
      ]

puzzles : [ (String, [ String ]) ]
...     = [ ("s1",  s1),
            ("s2",  s2),
            ("s3",  s3),
            ("s4",  s4),
            ("s5",  s5),
            ("s6",  s6),
            ("s7",  s7),
            ("s8",  s8),
            ("s9",  s9),
            ("s10", s10),
            ("s11", s11),
            ("s12", s12),
            ("s13", s13),
            ("s14", s14),
            ("s15", s15)
          ]



-- ========== Tie Everything Together ========== --

main  : () -> ()
... _ = iter solvePuzzle puzzles
        where solvePuzzle (name, sq) = printEndline <| "========== Considering Puzzle `" # name # "` =========="
                                       printEndline newline
                                       case sq |>
                                              parse >>
                                              solve
                                         Just sol -> sol |>
                                                       check >>
                                                       showSolution >>
                                                       printEndline
                                         Nothing  -> error "It didn't produce any solution!"
                                       "" |>
                                         replicate 3 >>
                                         iter printEndline
              check sq               = if correctSolution? sq
                                          then sq
                                          else error "It's not correct!"
              error                  = ("Bad news!" # _) >>
                                         uppercase >>
                                         fail
