PRAGMA Tanager5
PRAGMA Library Demo.TowersOfHanoi

-- Towers of Hanoi in Tanager.                        --
--                                                    --
-- Copyright 2015-2018 K.D.P.Ross <KDPRoss@gmail.com> --
--                                                    --
-- This code is licensed only for study and personal  --
-- enrichment.                                        --

-- See: https://en.wikipedia.org/wiki/Tower_of_Hanoi



-- /------------------------------------------\
-- | ‘The raison  d'être  of a program  is to |
-- | be  a  mathematically-elegant  object of |
-- | sublime beauty; it's also pretty cool if |
-- | it  occasionally   computes  something.’ |
-- |                             - K.D.P.Ross |
-- \------------------------------------------/



_ = topLevel|loadFile "Prelude.Extended.lib.t5"



-- ========== Representation ========== --

-- Head of the list will be the top of the 'tower'.
typedef Towers = [ [ Num ] ]

num-towers : Num
...        = 3



-- ========== Debugging / Output ========== --

verbose : Bool
...     = True



-- ========== Disc-Moving Logistics ========== --

-- `move-one-unsafe m n ts` moves the top disc from the
-- `m`th tower to the `nth` with no validity checks
move-one-unsafe : Num -> Num -> Towers -> Towers
... m n ts      = ts''
                  where ts''        = setNth m dms         ts'
                        ts'         = setNth n (dm :: dns) ts
                        (dm :: dms) = ts `nth` m
                        dns         = ts `nth` n

-- `move-one m n ts` moves the top disc from the `m`th tower
-- to the `n`th.
move-one   : Num -> Num -> Towers -> Towers
... m n ts = if verbose
                then ts |> show >> printEndline
             cases
               m == n                             -> ~
               invalid m                          -> ~
               invalid n                          -> ~
               dms == []                          -> ~
               dns =/= [] and head dns < head dms -> ~
               _                                  -> move-one-unsafe m n ts
             where invalid = (_ <= 0) or^ (_ > num-towers)
                   dms     = ts `nth` m
                   dns     = ts `nth` n

-- `move-n num m n ts` moves the top `num` discs from the
-- `m`th tower to the `n`th. Assumes: All towers valid and
-- that The 'third tower' is empty xor the 'third tower' has
-- a disc larger than the top `num` discs of the `m`th
-- tower.

-- The solution (which I rederived, having not done this
-- problem in probably 15 years) is very likely the
-- 'standard' recursive one: Move `num` discs from `m` to
-- `n` with `third` as the 'temp' post by:
-- - if `1 == num`, then just move the disc (base case)
-- - else:
--   - move `n - 1` discs from `m` to `third`, using `n` as
--     the 'temp'
--   - move 1 disc from `m` to `n`
--   - move `n - 1` discs from `third` to `n` using `m` as
--     the 'temp'

-- Viva induction!

move-n         : Num -> Num -> Num -> Towers -> Towers
... 1   m n ts = move-one m n ts
... num m n ts = ts'''
                 where third = 6 - (m + n)
                       ts'   = move-n (num - 1) m third ts
                       ts''  = move-one m n ts'
                               -- We *could* call `move-unsafe` here because it always will
                               -- be safe, by construction.
                       ts''' = move-n (num - 1) third n ts''



-- ========== Tie Everything Together ========== --

-- Arbitrarily, we'll start the discs at tower 1.
start-state : Num -> Towers
...         = count >> (_ :: replicate (num-towers - 1) [])

-- Again, we'll arbitrarily select tower 3 as the
-- destination.
solve : Num -> ()
... n = printEndline <| "Solving with " # show n # " discs (from tower 1 to 3) ..."
        sol |> show >> printEndline
        if reverse start == sol
           then printEndline "(Answer is correct.)"
           else printEndline "FAIL!"
        where sol   = move-n n 1 3 start
              start = start-state n
